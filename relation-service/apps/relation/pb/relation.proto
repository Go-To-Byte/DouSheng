syntax = "proto3";

package dousheng.relation;
option go_package="github.com/Go-To-Byte/DouSheng/relation-service/apps/relation";

import "github.com/Go-To-Byte/DouSheng/user-service/apps/user/pb/user.proto";

// 定义 relation 模块的接口
service Service {
  // 获取关注列表
  rpc FollowList(FollowListRequest) returns(FollowListResponse);
  // 获取粉丝列表
  rpc FollowerList(FollowerListRequest) returns(FollowerListResponse);
  // 获取 1、关注数量 2、粉丝数量
  rpc ListCount(ListCountRequest) returns(ListCountResponse);
  // 获取好友列表
  rpc FriendList(FriendListRequest) returns(FriendListResponse);
  // 关注操作-关注与取关
  rpc FollowAction(FollowActionRequest) returns(FollowActionResponse);

  // 查看用户是否是我的粉丝
  rpc IsFollower(UserFollowPo) returns(IsFollowerResponse);
}

// 用户关注表:与数据库对应的PO对象
message UserFollowPo {
  // 用户ID
  // @gotags: json:"user_id" gorm:"user_id"
  int64 user_id = 1;
  // 关注用户ID
  // @gotags: json:"follow_id" gorm:"follow_id"
  int64 follow_id = 2;
  // 关注用户状态, 0:取关, 1:关注
  // @gotags: json:"follow_flag" gorm:"follow_flag"
  ActionType follow_flag = 3;
}

// 用户粉丝表:与数据库对应的PO对象
message UserFollowerPo {
  // 用户ID
  // @gotags: json:"user_id" gorm:"user_id"
  int64 user_id = 1;
  // 粉丝用户ID
  // @gotags: json:"follower_id" gorm:"follower_id"
  int64 follower_id = 2;
  // 粉丝用户状态, 0:取关, 1:关注
  // @gotags: json:"follower_flag" gorm:"follower_flag"
  ActionType follower_flag = 3;
}

// 用户好友 [因为官方的接口需要将字段平铺返回，所以不能直接组合 user.User，只能 copy一份...]
message UserFriend {
  // @gotags: json:"id"
  int64 id = 1; // 用户id
  // @gotags: json:"name"
  string name = 2; // 用户名称
  // @gotags: json:"follow_count"
  optional int64 follow_count = 3; // 关注总数
  // @gotags: json:"follower_count"
  optional int64 follower_count = 4; // 粉丝总数
  // @gotags: json:"is_follow"
  bool is_follow = 5; // true-已关注，false-未关
  // @gotags: json:"avatar"
  optional string avatar = 6; //用户头像
  // @gotags: json:"background_image"
  optional string background_image = 7; //用户个人页顶部大图
  // @gotags: json:"signature"
  optional string signature = 8; //个人简介
  // @gotags: json:"total_favorited"
  optional int64 total_favorited = 9; //获赞数量
  // @gotags: json:"work_count"
  optional int64 work_count = 10; //作品数
  // @gotags: json:"favorite_count"
  optional int64 favorite_count = 11; //点赞数量

  // 和该好友聊天的最新消息
  // @gotags: json:"message"
  string message = 12;
  // message消息的类型, 0 => 当前请求用户接收的消息, 1 => 当前请求用户发送的消息
  // @gotags: json:"msg_type"
  int64 msgType = 13;
}

// 获取关系列表 的接口请求 model
message FollowListRequest {
  // 用户ID
  // @gotags: json:"user_id" form:"user_id" validate:"required" binding:"required"
  int64 user_id = 1;
  // 用户鉴权Token
  // @gotags: json:"token" form:"token" binding:"required"
  string token = 2;
}

// 获取关注列表 的接口响应 model
message FollowListResponse {
  // 关注列表用户信息
  // @gotags: json:"user_list"
  repeated user.User user_list = 1;
}

// 获取粉丝列表 的接口请求 model
message FollowerListRequest {
  // 用户ID
  // @gotags: json:"user_id" form:"user_id" validate:"required" binding:"required"
  int64 user_id = 1;
  // 用户鉴权Token
  // @gotags: json:"token" form:"token" binding:"required"
  string token = 2;
}

// 获取粉丝列表 的接口响应 model
message FollowerListResponse {
  // 关注列表用户信息
  // @gotags: json:"user_list"
  repeated user.User user_list = 1;
}

// 获取用户好友列表 的接口请求 model
message FriendListRequest {
  // 用户ID
  // @gotags: json:"user_id" form:"user_id" validate:"required" binding:"required"
  int64 user_id = 1;
  // 用户鉴权Token
  // @gotags: json:"token" form:"token" binding:"required"
  string token = 2;
}

// 获取用户好友列表 的接口响应 model
message FriendListResponse {
  // 用户好友列表
  // @gotags: json:"user_list"
  repeated UserFriend user_list = 1;
}

// 操作类型、顺便做 flag
enum ActionType {
  // 取消关注后，再次关注
  AGAIN_FOLLOW = 0;
  // 关注
  FOLLOW_ACTION = 1;
  // 取消关注
  UN_FOLLOW_ACTION = 2;
}

// 关注操作 的接口请求 model
message FollowActionRequest {
  // 被关注或被取关的用户ID
  // @gotags: json:"to_user_id" form:"to_user_id" validate:"required" binding:"required"
  int64 to_user_id = 1;
  // 用户鉴权Token
  // @gotags: json:"token" form:"token" binding:"required"
  string token = 2;
  // 操作类型
  // @gotags: json:"action_type" form:"action_type" validate:"required" binding:"required"
  ActionType action_type = 4;
}

// 关注操作 的接口相应 model
message FollowActionResponse {
  // 可以携带一些额外属性
  // @gotags: json:"mate"
  map<string, string> mate = 1;
}

// 查询的数量类型
enum CountType {
  // 关注数
  FOLLOW = 0;
  // 粉丝数
  FOLLOWER = 1;
  // 两个都查出来
  ALL = 2;
}

message ListCountRequest {
  // 用户ID
  // @gotags: json:"user_id" validate:"required"
  int64 user_id = 1;
  // 查询的总数类型
  // @gotags: json:"type"
  CountType type = 2;
}

// 用于获取总数、[粉丝数量、关注数量]
message ListCountResponse {
  // 关注数量
  // @gotags: json:"follow_count"
  int64 follow_count = 1;
  // 粉丝数量
  // @gotags: json:"follower_count"
  int64 follower_count = 2;
}

message IsFollowerResponse {
  // 是我的粉丝
  // @gotags: json:"my_follower"
  bool my_follower = 1;
}
