// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: apps/relation/pb/relation.proto

package relation

import (
	user "github.com/Go-To-Byte/DouSheng/user-service/apps/user"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 操作类型、顺便做 flag
type ActionType int32

const (
	// 取消关注后，再次关注
	ActionType_AGAIN_FOLLOW ActionType = 0
	// 关注
	ActionType_FOLLOW_ACTION ActionType = 1
	// 取消关注
	ActionType_UN_FOLLOW_ACTION ActionType = 2
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "AGAIN_FOLLOW",
		1: "FOLLOW_ACTION",
		2: "UN_FOLLOW_ACTION",
	}
	ActionType_value = map[string]int32{
		"AGAIN_FOLLOW":     0,
		"FOLLOW_ACTION":    1,
		"UN_FOLLOW_ACTION": 2,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_apps_relation_pb_relation_proto_enumTypes[0].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_apps_relation_pb_relation_proto_enumTypes[0]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_apps_relation_pb_relation_proto_rawDescGZIP(), []int{0}
}

// 查询的数量类型
type CountType int32

const (
	// 关注数
	CountType_FOLLOW CountType = 0
	// 粉丝数
	CountType_FOLLOWER CountType = 1
	// 两个都查出来
	CountType_ALL CountType = 2
)

// Enum value maps for CountType.
var (
	CountType_name = map[int32]string{
		0: "FOLLOW",
		1: "FOLLOWER",
		2: "ALL",
	}
	CountType_value = map[string]int32{
		"FOLLOW":   0,
		"FOLLOWER": 1,
		"ALL":      2,
	}
)

func (x CountType) Enum() *CountType {
	p := new(CountType)
	*p = x
	return p
}

func (x CountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CountType) Descriptor() protoreflect.EnumDescriptor {
	return file_apps_relation_pb_relation_proto_enumTypes[1].Descriptor()
}

func (CountType) Type() protoreflect.EnumType {
	return &file_apps_relation_pb_relation_proto_enumTypes[1]
}

func (x CountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CountType.Descriptor instead.
func (CountType) EnumDescriptor() ([]byte, []int) {
	return file_apps_relation_pb_relation_proto_rawDescGZIP(), []int{1}
}

// 用户关注表:与数据库对应的PO对象
type UserFollowPo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户ID
	// @gotags: json:"user_id" gorm:"user_id"
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id" gorm:"user_id"`
	// 关注用户ID
	// @gotags: json:"follow_id" gorm:"follow_id"
	FollowId int64 `protobuf:"varint,2,opt,name=follow_id,json=followId,proto3" json:"follow_id" gorm:"follow_id"`
	// 关注用户状态, 0:取关, 1:关注
	// @gotags: json:"follow_flag" gorm:"follow_flag"
	FollowFlag ActionType `protobuf:"varint,3,opt,name=follow_flag,json=followFlag,proto3,enum=dousheng.relation.ActionType" json:"follow_flag" gorm:"follow_flag"`
}

func (x *UserFollowPo) Reset() {
	*x = UserFollowPo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_relation_pb_relation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFollowPo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFollowPo) ProtoMessage() {}

func (x *UserFollowPo) ProtoReflect() protoreflect.Message {
	mi := &file_apps_relation_pb_relation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFollowPo.ProtoReflect.Descriptor instead.
func (*UserFollowPo) Descriptor() ([]byte, []int) {
	return file_apps_relation_pb_relation_proto_rawDescGZIP(), []int{0}
}

func (x *UserFollowPo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserFollowPo) GetFollowId() int64 {
	if x != nil {
		return x.FollowId
	}
	return 0
}

func (x *UserFollowPo) GetFollowFlag() ActionType {
	if x != nil {
		return x.FollowFlag
	}
	return ActionType_AGAIN_FOLLOW
}

// 用户粉丝表:与数据库对应的PO对象
type UserFollowerPo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户ID
	// @gotags: json:"user_id" gorm:"user_id"
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id" gorm:"user_id"`
	// 粉丝用户ID
	// @gotags: json:"follower_id" gorm:"follower_id"
	FollowerId int64 `protobuf:"varint,2,opt,name=follower_id,json=followerId,proto3" json:"follower_id" gorm:"follower_id"`
	// 粉丝用户状态, 0:取关, 1:关注
	// @gotags: json:"follower_flag" gorm:"follower_flag"
	FollowerFlag ActionType `protobuf:"varint,3,opt,name=follower_flag,json=followerFlag,proto3,enum=dousheng.relation.ActionType" json:"follower_flag" gorm:"follower_flag"`
}

func (x *UserFollowerPo) Reset() {
	*x = UserFollowerPo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_relation_pb_relation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFollowerPo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFollowerPo) ProtoMessage() {}

func (x *UserFollowerPo) ProtoReflect() protoreflect.Message {
	mi := &file_apps_relation_pb_relation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFollowerPo.ProtoReflect.Descriptor instead.
func (*UserFollowerPo) Descriptor() ([]byte, []int) {
	return file_apps_relation_pb_relation_proto_rawDescGZIP(), []int{1}
}

func (x *UserFollowerPo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserFollowerPo) GetFollowerId() int64 {
	if x != nil {
		return x.FollowerId
	}
	return 0
}

func (x *UserFollowerPo) GetFollowerFlag() ActionType {
	if x != nil {
		return x.FollowerFlag
	}
	return ActionType_AGAIN_FOLLOW
}

// 用户好友 [因为官方的接口需要将字段平铺返回，所以不能直接组合 user.User，只能 copy一份...]
type UserFriend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: json:"id"
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"` // 用户id
	// @gotags: json:"name"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"` // 用户名称
	// @gotags: json:"follow_count"
	FollowCount *int64 `protobuf:"varint,3,opt,name=follow_count,json=followCount,proto3,oneof" json:"follow_count"` // 关注总数
	// @gotags: json:"follower_count"
	FollowerCount *int64 `protobuf:"varint,4,opt,name=follower_count,json=followerCount,proto3,oneof" json:"follower_count"` // 粉丝总数
	// @gotags: json:"is_follow"
	IsFollow bool `protobuf:"varint,5,opt,name=is_follow,json=isFollow,proto3" json:"is_follow"` // true-已关注，false-未关
	// @gotags: json:"avatar"
	Avatar *string `protobuf:"bytes,6,opt,name=avatar,proto3,oneof" json:"avatar"` //用户头像
	// @gotags: json:"background_image"
	BackgroundImage *string `protobuf:"bytes,7,opt,name=background_image,json=backgroundImage,proto3,oneof" json:"background_image"` //用户个人页顶部大图
	// @gotags: json:"signature"
	Signature *string `protobuf:"bytes,8,opt,name=signature,proto3,oneof" json:"signature"` //个人简介
	// @gotags: json:"total_favorited"
	TotalFavorited *int64 `protobuf:"varint,9,opt,name=total_favorited,json=totalFavorited,proto3,oneof" json:"total_favorited"` //获赞数量
	// @gotags: json:"work_count"
	WorkCount *int64 `protobuf:"varint,10,opt,name=work_count,json=workCount,proto3,oneof" json:"work_count"` //作品数
	// @gotags: json:"favorite_count"
	FavoriteCount *int64 `protobuf:"varint,11,opt,name=favorite_count,json=favoriteCount,proto3,oneof" json:"favorite_count"` //点赞数量
	// 和该好友聊天的最新消息
	// @gotags: json:"message"
	Message string `protobuf:"bytes,12,opt,name=message,proto3" json:"message"`
	// message消息的类型, 0 => 当前请求用户接收的消息, 1 => 当前请求用户发送的消息
	// @gotags: json:"msg_type"
	MsgType int64 `protobuf:"varint,13,opt,name=msgType,proto3" json:"msg_type"`
}

func (x *UserFriend) Reset() {
	*x = UserFriend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_relation_pb_relation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFriend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFriend) ProtoMessage() {}

func (x *UserFriend) ProtoReflect() protoreflect.Message {
	mi := &file_apps_relation_pb_relation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFriend.ProtoReflect.Descriptor instead.
func (*UserFriend) Descriptor() ([]byte, []int) {
	return file_apps_relation_pb_relation_proto_rawDescGZIP(), []int{2}
}

func (x *UserFriend) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserFriend) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserFriend) GetFollowCount() int64 {
	if x != nil && x.FollowCount != nil {
		return *x.FollowCount
	}
	return 0
}

func (x *UserFriend) GetFollowerCount() int64 {
	if x != nil && x.FollowerCount != nil {
		return *x.FollowerCount
	}
	return 0
}

func (x *UserFriend) GetIsFollow() bool {
	if x != nil {
		return x.IsFollow
	}
	return false
}

func (x *UserFriend) GetAvatar() string {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return ""
}

func (x *UserFriend) GetBackgroundImage() string {
	if x != nil && x.BackgroundImage != nil {
		return *x.BackgroundImage
	}
	return ""
}

func (x *UserFriend) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *UserFriend) GetTotalFavorited() int64 {
	if x != nil && x.TotalFavorited != nil {
		return *x.TotalFavorited
	}
	return 0
}

func (x *UserFriend) GetWorkCount() int64 {
	if x != nil && x.WorkCount != nil {
		return *x.WorkCount
	}
	return 0
}

func (x *UserFriend) GetFavoriteCount() int64 {
	if x != nil && x.FavoriteCount != nil {
		return *x.FavoriteCount
	}
	return 0
}

func (x *UserFriend) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UserFriend) GetMsgType() int64 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

// 获取关系列表 的接口请求 model
type FollowListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户ID
	// @gotags: json:"user_id" form:"user_id" validate:"required" binding:"required"
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id" form:"user_id" validate:"required" binding:"required"`
	// 用户鉴权Token
	// @gotags: json:"token" form:"token" binding:"required"
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token" form:"token" binding:"required"`
}

func (x *FollowListRequest) Reset() {
	*x = FollowListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_relation_pb_relation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowListRequest) ProtoMessage() {}

func (x *FollowListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apps_relation_pb_relation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowListRequest.ProtoReflect.Descriptor instead.
func (*FollowListRequest) Descriptor() ([]byte, []int) {
	return file_apps_relation_pb_relation_proto_rawDescGZIP(), []int{3}
}

func (x *FollowListRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FollowListRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// 获取关注列表 的接口响应 model
type FollowListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 关注列表用户信息
	// @gotags: json:"user_list"
	UserList []*user.User `protobuf:"bytes,1,rep,name=user_list,json=userList,proto3" json:"user_list"`
}

func (x *FollowListResponse) Reset() {
	*x = FollowListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_relation_pb_relation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowListResponse) ProtoMessage() {}

func (x *FollowListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apps_relation_pb_relation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowListResponse.ProtoReflect.Descriptor instead.
func (*FollowListResponse) Descriptor() ([]byte, []int) {
	return file_apps_relation_pb_relation_proto_rawDescGZIP(), []int{4}
}

func (x *FollowListResponse) GetUserList() []*user.User {
	if x != nil {
		return x.UserList
	}
	return nil
}

// 获取粉丝列表 的接口请求 model
type FollowerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户ID
	// @gotags: json:"user_id" form:"user_id" validate:"required" binding:"required"
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id" form:"user_id" validate:"required" binding:"required"`
	// 用户鉴权Token
	// @gotags: json:"token" form:"token" binding:"required"
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token" form:"token" binding:"required"`
}

func (x *FollowerListRequest) Reset() {
	*x = FollowerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_relation_pb_relation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowerListRequest) ProtoMessage() {}

func (x *FollowerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apps_relation_pb_relation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowerListRequest.ProtoReflect.Descriptor instead.
func (*FollowerListRequest) Descriptor() ([]byte, []int) {
	return file_apps_relation_pb_relation_proto_rawDescGZIP(), []int{5}
}

func (x *FollowerListRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FollowerListRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// 获取粉丝列表 的接口响应 model
type FollowerListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 关注列表用户信息
	// @gotags: json:"user_list"
	UserList []*user.User `protobuf:"bytes,1,rep,name=user_list,json=userList,proto3" json:"user_list"`
}

func (x *FollowerListResponse) Reset() {
	*x = FollowerListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_relation_pb_relation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowerListResponse) ProtoMessage() {}

func (x *FollowerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apps_relation_pb_relation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowerListResponse.ProtoReflect.Descriptor instead.
func (*FollowerListResponse) Descriptor() ([]byte, []int) {
	return file_apps_relation_pb_relation_proto_rawDescGZIP(), []int{6}
}

func (x *FollowerListResponse) GetUserList() []*user.User {
	if x != nil {
		return x.UserList
	}
	return nil
}

// 获取用户好友列表 的接口请求 model
type FriendListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户ID
	// @gotags: json:"user_id" form:"user_id" validate:"required" binding:"required"
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id" form:"user_id" validate:"required" binding:"required"`
	// 用户鉴权Token
	// @gotags: json:"token" form:"token" binding:"required"
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token" form:"token" binding:"required"`
}

func (x *FriendListRequest) Reset() {
	*x = FriendListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_relation_pb_relation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendListRequest) ProtoMessage() {}

func (x *FriendListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apps_relation_pb_relation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendListRequest.ProtoReflect.Descriptor instead.
func (*FriendListRequest) Descriptor() ([]byte, []int) {
	return file_apps_relation_pb_relation_proto_rawDescGZIP(), []int{7}
}

func (x *FriendListRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FriendListRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// 获取用户好友列表 的接口响应 model
type FriendListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户好友列表
	// @gotags: json:"user_list"
	UserList []*UserFriend `protobuf:"bytes,1,rep,name=user_list,json=userList,proto3" json:"user_list"`
}

func (x *FriendListResponse) Reset() {
	*x = FriendListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_relation_pb_relation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendListResponse) ProtoMessage() {}

func (x *FriendListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apps_relation_pb_relation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendListResponse.ProtoReflect.Descriptor instead.
func (*FriendListResponse) Descriptor() ([]byte, []int) {
	return file_apps_relation_pb_relation_proto_rawDescGZIP(), []int{8}
}

func (x *FriendListResponse) GetUserList() []*UserFriend {
	if x != nil {
		return x.UserList
	}
	return nil
}

// 关注操作 的接口请求 model
type FollowActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 被关注或被取关的用户ID
	// @gotags: json:"to_user_id" form:"to_user_id" validate:"required" binding:"required"
	ToUserId int64 `protobuf:"varint,1,opt,name=to_user_id,json=toUserId,proto3" json:"to_user_id" form:"to_user_id" validate:"required" binding:"required"`
	// 用户鉴权Token
	// @gotags: json:"token" form:"token" binding:"required"
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token" form:"token" binding:"required"`
	// 操作类型
	// @gotags: json:"action_type" form:"action_type" validate:"required" binding:"required"
	ActionType ActionType `protobuf:"varint,4,opt,name=action_type,json=actionType,proto3,enum=dousheng.relation.ActionType" json:"action_type" form:"action_type" validate:"required" binding:"required"`
}

func (x *FollowActionRequest) Reset() {
	*x = FollowActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_relation_pb_relation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowActionRequest) ProtoMessage() {}

func (x *FollowActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apps_relation_pb_relation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowActionRequest.ProtoReflect.Descriptor instead.
func (*FollowActionRequest) Descriptor() ([]byte, []int) {
	return file_apps_relation_pb_relation_proto_rawDescGZIP(), []int{9}
}

func (x *FollowActionRequest) GetToUserId() int64 {
	if x != nil {
		return x.ToUserId
	}
	return 0
}

func (x *FollowActionRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *FollowActionRequest) GetActionType() ActionType {
	if x != nil {
		return x.ActionType
	}
	return ActionType_AGAIN_FOLLOW
}

// 关注操作 的接口相应 model
type FollowActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 可以携带一些额外属性
	// @gotags: json:"mate"
	Mate map[string]string `protobuf:"bytes,1,rep,name=mate,proto3" json:"mate" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FollowActionResponse) Reset() {
	*x = FollowActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_relation_pb_relation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowActionResponse) ProtoMessage() {}

func (x *FollowActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apps_relation_pb_relation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowActionResponse.ProtoReflect.Descriptor instead.
func (*FollowActionResponse) Descriptor() ([]byte, []int) {
	return file_apps_relation_pb_relation_proto_rawDescGZIP(), []int{10}
}

func (x *FollowActionResponse) GetMate() map[string]string {
	if x != nil {
		return x.Mate
	}
	return nil
}

type ListCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户ID
	// @gotags: json:"user_id" validate:"required"
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id" validate:"required"`
	// 查询的总数类型
	// @gotags: json:"type"
	Type CountType `protobuf:"varint,2,opt,name=type,proto3,enum=dousheng.relation.CountType" json:"type"`
}

func (x *ListCountRequest) Reset() {
	*x = ListCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_relation_pb_relation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCountRequest) ProtoMessage() {}

func (x *ListCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apps_relation_pb_relation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCountRequest.ProtoReflect.Descriptor instead.
func (*ListCountRequest) Descriptor() ([]byte, []int) {
	return file_apps_relation_pb_relation_proto_rawDescGZIP(), []int{11}
}

func (x *ListCountRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListCountRequest) GetType() CountType {
	if x != nil {
		return x.Type
	}
	return CountType_FOLLOW
}

// 用于获取总数、[粉丝数量、关注数量]
type ListCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 关注数量
	// @gotags: json:"follow_count"
	FollowCount int64 `protobuf:"varint,1,opt,name=follow_count,json=followCount,proto3" json:"follow_count"`
	// 粉丝数量
	// @gotags: json:"follower_count"
	FollowerCount int64 `protobuf:"varint,2,opt,name=follower_count,json=followerCount,proto3" json:"follower_count"`
}

func (x *ListCountResponse) Reset() {
	*x = ListCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_relation_pb_relation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCountResponse) ProtoMessage() {}

func (x *ListCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apps_relation_pb_relation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCountResponse.ProtoReflect.Descriptor instead.
func (*ListCountResponse) Descriptor() ([]byte, []int) {
	return file_apps_relation_pb_relation_proto_rawDescGZIP(), []int{12}
}

func (x *ListCountResponse) GetFollowCount() int64 {
	if x != nil {
		return x.FollowCount
	}
	return 0
}

func (x *ListCountResponse) GetFollowerCount() int64 {
	if x != nil {
		return x.FollowerCount
	}
	return 0
}

type IsFollowerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是我的粉丝
	// @gotags: json:"my_follower"
	MyFollower bool `protobuf:"varint,1,opt,name=my_follower,json=myFollower,proto3" json:"my_follower"`
}

func (x *IsFollowerResponse) Reset() {
	*x = IsFollowerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_relation_pb_relation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsFollowerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsFollowerResponse) ProtoMessage() {}

func (x *IsFollowerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apps_relation_pb_relation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsFollowerResponse.ProtoReflect.Descriptor instead.
func (*IsFollowerResponse) Descriptor() ([]byte, []int) {
	return file_apps_relation_pb_relation_proto_rawDescGZIP(), []int{13}
}

func (x *IsFollowerResponse) GetMyFollower() bool {
	if x != nil {
		return x.MyFollower
	}
	return false
}

var File_apps_relation_pb_relation_proto protoreflect.FileDescriptor

var file_apps_relation_pb_relation_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x70, 0x62, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x64, 0x6f, 0x75, 0x73, 0x68, 0x65, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x47, 0x6f, 0x2d, 0x54, 0x6f, 0x2d, 0x42, 0x79, 0x74, 0x65, 0x2f, 0x44, 0x6f, 0x75, 0x53,
	0x68, 0x65, 0x6e, 0x67, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x55, 0x73,
	0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x64,
	0x12, 0x3e, 0x0a, 0x0b, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x75, 0x73, 0x68, 0x65, 0x6e, 0x67,
	0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x61, 0x67,
	0x22, 0x8e, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x50, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x42, 0x0a,
	0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x75, 0x73, 0x68, 0x65, 0x6e, 0x67, 0x2e,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x6c, 0x61,
	0x67, 0x22, 0xcb, 0x04, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0f,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05,
	0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x07, 0x52, 0x0d, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x42, 0x0a, 0x11, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x46, 0x0a, 0x12, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64,
	0x6f, 0x75, 0x73, 0x68, 0x65, 0x6e, 0x67, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x13, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x48, 0x0a, 0x14, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64,
	0x6f, 0x75, 0x73, 0x68, 0x65, 0x6e, 0x67, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x11, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x50, 0x0a, 0x12, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x75, 0x73, 0x68,
	0x65, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x6f, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3e, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x75, 0x73, 0x68, 0x65, 0x6e, 0x67, 0x2e, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x96, 0x01,
	0x0a, 0x14, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x6f, 0x75, 0x73, 0x68, 0x65, 0x6e, 0x67, 0x2e,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x61, 0x74, 0x65, 0x1a, 0x37, 0x0a,
	0x09, 0x4d, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5d, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x64, 0x6f, 0x75, 0x73, 0x68, 0x65, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5d, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x35, 0x0a, 0x12, 0x49, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x79,
	0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x6d, 0x79, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x2a, 0x47, 0x0a, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x47, 0x41,
	0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46,
	0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x55, 0x4e, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x02, 0x2a, 0x2e, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x4c, 0x4c, 0x10, 0x02, 0x32, 0xaf, 0x04, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x59, 0x0a, 0x0a, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24,
	0x2e, 0x64, 0x6f, 0x75, 0x73, 0x68, 0x65, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x6f, 0x75, 0x73, 0x68, 0x65, 0x6e, 0x67, 0x2e,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x2e, 0x64, 0x6f,
	0x75, 0x73, 0x68, 0x65, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x6f, 0x75, 0x73, 0x68, 0x65, 0x6e, 0x67, 0x2e, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x09,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x64, 0x6f, 0x75, 0x73,
	0x68, 0x65, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x64, 0x6f, 0x75, 0x73, 0x68, 0x65, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0a, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x24, 0x2e, 0x64, 0x6f, 0x75, 0x73, 0x68, 0x65, 0x6e, 0x67, 0x2e, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x6f, 0x75, 0x73, 0x68,
	0x65, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5f, 0x0a, 0x0c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x26, 0x2e, 0x64, 0x6f, 0x75, 0x73, 0x68, 0x65, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x6f, 0x75, 0x73, 0x68, 0x65,
	0x6e, 0x67, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x54, 0x0a, 0x0a, 0x49, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1f,
	0x2e, 0x64, 0x6f, 0x75, 0x73, 0x68, 0x65, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x1a,
	0x25, 0x2e, 0x64, 0x6f, 0x75, 0x73, 0x68, 0x65, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x6f, 0x2d, 0x54, 0x6f, 0x2d, 0x42, 0x79, 0x74, 0x65, 0x2f,
	0x44, 0x6f, 0x75, 0x53, 0x68, 0x65, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_apps_relation_pb_relation_proto_rawDescOnce sync.Once
	file_apps_relation_pb_relation_proto_rawDescData = file_apps_relation_pb_relation_proto_rawDesc
)

func file_apps_relation_pb_relation_proto_rawDescGZIP() []byte {
	file_apps_relation_pb_relation_proto_rawDescOnce.Do(func() {
		file_apps_relation_pb_relation_proto_rawDescData = protoimpl.X.CompressGZIP(file_apps_relation_pb_relation_proto_rawDescData)
	})
	return file_apps_relation_pb_relation_proto_rawDescData
}

var file_apps_relation_pb_relation_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_apps_relation_pb_relation_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_apps_relation_pb_relation_proto_goTypes = []interface{}{
	(ActionType)(0),              // 0: dousheng.relation.ActionType
	(CountType)(0),               // 1: dousheng.relation.CountType
	(*UserFollowPo)(nil),         // 2: dousheng.relation.UserFollowPo
	(*UserFollowerPo)(nil),       // 3: dousheng.relation.UserFollowerPo
	(*UserFriend)(nil),           // 4: dousheng.relation.UserFriend
	(*FollowListRequest)(nil),    // 5: dousheng.relation.FollowListRequest
	(*FollowListResponse)(nil),   // 6: dousheng.relation.FollowListResponse
	(*FollowerListRequest)(nil),  // 7: dousheng.relation.FollowerListRequest
	(*FollowerListResponse)(nil), // 8: dousheng.relation.FollowerListResponse
	(*FriendListRequest)(nil),    // 9: dousheng.relation.FriendListRequest
	(*FriendListResponse)(nil),   // 10: dousheng.relation.FriendListResponse
	(*FollowActionRequest)(nil),  // 11: dousheng.relation.FollowActionRequest
	(*FollowActionResponse)(nil), // 12: dousheng.relation.FollowActionResponse
	(*ListCountRequest)(nil),     // 13: dousheng.relation.ListCountRequest
	(*ListCountResponse)(nil),    // 14: dousheng.relation.ListCountResponse
	(*IsFollowerResponse)(nil),   // 15: dousheng.relation.IsFollowerResponse
	nil,                          // 16: dousheng.relation.FollowActionResponse.MateEntry
	(*user.User)(nil),            // 17: dousheng.user.User
}
var file_apps_relation_pb_relation_proto_depIdxs = []int32{
	0,  // 0: dousheng.relation.UserFollowPo.follow_flag:type_name -> dousheng.relation.ActionType
	0,  // 1: dousheng.relation.UserFollowerPo.follower_flag:type_name -> dousheng.relation.ActionType
	17, // 2: dousheng.relation.FollowListResponse.user_list:type_name -> dousheng.user.User
	17, // 3: dousheng.relation.FollowerListResponse.user_list:type_name -> dousheng.user.User
	4,  // 4: dousheng.relation.FriendListResponse.user_list:type_name -> dousheng.relation.UserFriend
	0,  // 5: dousheng.relation.FollowActionRequest.action_type:type_name -> dousheng.relation.ActionType
	16, // 6: dousheng.relation.FollowActionResponse.mate:type_name -> dousheng.relation.FollowActionResponse.MateEntry
	1,  // 7: dousheng.relation.ListCountRequest.type:type_name -> dousheng.relation.CountType
	5,  // 8: dousheng.relation.Service.FollowList:input_type -> dousheng.relation.FollowListRequest
	7,  // 9: dousheng.relation.Service.FollowerList:input_type -> dousheng.relation.FollowerListRequest
	13, // 10: dousheng.relation.Service.ListCount:input_type -> dousheng.relation.ListCountRequest
	9,  // 11: dousheng.relation.Service.FriendList:input_type -> dousheng.relation.FriendListRequest
	11, // 12: dousheng.relation.Service.FollowAction:input_type -> dousheng.relation.FollowActionRequest
	2,  // 13: dousheng.relation.Service.IsFollower:input_type -> dousheng.relation.UserFollowPo
	6,  // 14: dousheng.relation.Service.FollowList:output_type -> dousheng.relation.FollowListResponse
	8,  // 15: dousheng.relation.Service.FollowerList:output_type -> dousheng.relation.FollowerListResponse
	14, // 16: dousheng.relation.Service.ListCount:output_type -> dousheng.relation.ListCountResponse
	10, // 17: dousheng.relation.Service.FriendList:output_type -> dousheng.relation.FriendListResponse
	12, // 18: dousheng.relation.Service.FollowAction:output_type -> dousheng.relation.FollowActionResponse
	15, // 19: dousheng.relation.Service.IsFollower:output_type -> dousheng.relation.IsFollowerResponse
	14, // [14:20] is the sub-list for method output_type
	8,  // [8:14] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_apps_relation_pb_relation_proto_init() }
func file_apps_relation_pb_relation_proto_init() {
	if File_apps_relation_pb_relation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_apps_relation_pb_relation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFollowPo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apps_relation_pb_relation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFollowerPo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apps_relation_pb_relation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFriend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apps_relation_pb_relation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apps_relation_pb_relation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apps_relation_pb_relation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apps_relation_pb_relation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowerListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apps_relation_pb_relation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apps_relation_pb_relation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apps_relation_pb_relation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apps_relation_pb_relation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apps_relation_pb_relation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apps_relation_pb_relation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apps_relation_pb_relation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsFollowerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_apps_relation_pb_relation_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_apps_relation_pb_relation_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_apps_relation_pb_relation_proto_goTypes,
		DependencyIndexes: file_apps_relation_pb_relation_proto_depIdxs,
		EnumInfos:         file_apps_relation_pb_relation_proto_enumTypes,
		MessageInfos:      file_apps_relation_pb_relation_proto_msgTypes,
	}.Build()
	File_apps_relation_pb_relation_proto = out.File
	file_apps_relation_pb_relation_proto_rawDesc = nil
	file_apps_relation_pb_relation_proto_goTypes = nil
	file_apps_relation_pb_relation_proto_depIdxs = nil
}
