syntax = "proto3";

package dousheng.user;
option go_package = "github.com/Go-To-Byte/DouSheng/user-service/apps/user";


// 定义 user 模块的接口
service Service {
  // 用户注册
  rpc Register(LoginAndRegisterRequest) returns(TokenResponse);
  // 用户登录
  rpc Login(LoginAndRegisterRequest) returns(TokenResponse);
  // 获取用户信息
  rpc UserInfo(UserInfoRequest) returns(UserInfoResponse);
  // 获取用户信息 map[userId] = User
  rpc UserMap(UserMapRequest) returns(UserMapResponse);
}


// 用户注册 & 登录 的接口请求 model
message LoginAndRegisterRequest {
  // 用户名【注册的话，最长32个字符】
  // @gotags: json:"username" validate:"required,max=32"
  string username = 1;
  // 密码
  // @gotags: json:"password" validate:"required,max=32"
  string password = 2;
}

// 用户注册 & 登录 的接口响应 model
message TokenResponse {
  // 用户ID
  // @gotags: json:"user_id"
  int64 user_id = 3;
}

// 获取用户信息 的接口请求 model
message UserInfoRequest {
  // 用户ID
  // @gotags: json:"user_id" validate:"required"
  int64 user_id = 1;
  // 登录用户ID
  // @gotags: json:"user_center_bff" validate:"required"
  int64 login_user_id = 2;
}

// 获取用户信息 的接口响应 model
message UserInfoResponse {
  // 用户信息
  // @gotags: json:"user"
  User user = 1;
}

// 调用用户信息 时返回的User
message User {
  // @gotags: json:"id"
  int64 id = 1; // 用户id
  // @gotags: json:"name"
  string name = 2; // 用户名称
  // @gotags: json:"avatar"
  optional string avatar = 3; //用户头像
  // @gotags: json:"background_image"
  optional string background_image = 4; //用户个人页顶部大图
  // @gotags: json:"signature"
  optional string signature = 5; //个人简介
}

// 与数据库对应的 PO 对象
message UserPo {
  // 用户ID
  // @gotags: json:"id" gorm:"id"
  int64 id = 1;
  // 用户名称
  // @gotags: json:"username" gorm:"username"
  string username = 2;
  // 用户名称
  // @gotags: json:"password" gorm:"password"
  string password = 3;
}

// 用户IDs
message UserMapRequest {
  // 用户ID 列表
  // @gotags: json:"user_ids"
  repeated int64 user_ids = 1;
  // 登录用户ID
  // @gotags: json:"user_center_bff" validate:"required"
  string login_user_id = 2;
}

// 用户列表：map[userId] = User
message UserMapResponse {
  // 用户列表：map[userId] = User
  // @gotags: json:"user_map"
  map<int64, User> user_map = 1;
}