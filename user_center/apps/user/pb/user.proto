syntax = "proto3";

package dousheng.user;
option go_package = "github.com/Go-To-Byte/DouSheng/user_center/apps/user";


// 定义 user 模块的接口
service Service {
  // 用户注册
  rpc Register(LoginAndRegisterRequest) returns(TokenResponse);
  // 用户登录
  rpc Login(LoginAndRegisterRequest) returns(TokenResponse);
  // 获取用户信息
  rpc UserInfo(UserInfoRequest) returns(UserInfoResponse);
  // 获取用户信息 map[userId] = User
  rpc UserMap(UserMapRequest) returns(UserMapResponse);
}


// 用户注册 & 登录 的接口请求 model
message LoginAndRegisterRequest {
  // 用户名【注册的话，最长32个字符】
  // @gotags: json:"username" form:"username" query:"username" vd:"len($) <= 30 && len($) > 0" validate:"required,max=32"
  string username = 1;
  // 密码
  // @gotags: json:"password" form:"password" query:"password" vd:"len($) <= 30 && len($) >= 6" validate:"required,max=32,min=6"
  string password = 2;
}

// 用户注册 & 登录 的接口响应 model
message TokenResponse {
  // 用户ID
  // @gotags: json:"user_id"
  int64 user_id = 3;
  // 用户鉴权Token
  // @gotags: json:"token"
  string token = 4;
}

// 获取用户信息 的接口请求 model
message UserInfoRequest {
  // 用户ID
  // @gotags: json:"user_id" query:"user_id" vd:"$ > 0" validate:"required"
  int64 user_id = 1;
  // 用户鉴权Token [注：这里用 validate，是因为内部方法也必须要用到 Token，并不是所有 token 都 validate]
  // @gotags: json:"token" query:"token" vd:"len($) > 0" validate:"required"
  string token = 2;
}

// 获取用户信息 的接口响应 model
message UserInfoResponse {
  // 用户信息
  // @gotags: json:"user"
  User user = 3;
}

// 调用用户信息 时返回的User
message User {
  // @gotags: json:"id"
  int64 id = 1; // 用户id
  // @gotags: json:"name"
  string name = 2; // 用户名称
  // @gotags: json:"follow_count"
  optional int64 follow_count = 3; // 关注总数
  // @gotags: json:"follower_count"
  optional int64 follower_count = 4; // 粉丝总数
  // @gotags: json:"is_follow"
  bool is_follow = 5; // true-已关注，false-未关
  // @gotags: json:"avatar"
  optional string avatar = 6; //用户头像
  // @gotags: json:"background_image"
  optional string background_image = 7; //用户个人页顶部大图
  // @gotags: json:"signature"
  optional string signature = 8; //个人简介
  // @gotags: json:"total_favorited"
  optional int64 total_favorited = 9; //获赞数量
  // @gotags: json:"work_count"
  optional int64 work_count = 10; //作品数
  // @gotags: json:"favorite_count"
  optional int64 favorite_count = 11; //点赞数量
}

// 与数据库对应的 PO 对象
message UserPo {
  // 用户ID
  // @gotags: json:"id" gorm:"id"
  int64 id = 1;
  // 用户名称
  // @gotags: json:"username" gorm:"username"
  string username = 2;
  // 用户名称
  // @gotags: json:"password" gorm:"password"
  string password = 3;
}

// 用户IDs
message UserMapRequest {
  // 用户ID 列表
  // @gotags: json:"user_ids"
  repeated int64 user_ids = 1;
  // 用户鉴权Token [注：这里用 validate，是因为内部方法也必须要用到 Token，并不是所有 token 都 validate]
  // @gotags: json:"token" validate:"required"
  string token = 2;
}

// 用户列表：map[userId] = User
message UserMapResponse {
  // 用户列表：map[userId] = User
  // @gotags: json:"user_map"
  map<int64, User> user_map = 1;
}